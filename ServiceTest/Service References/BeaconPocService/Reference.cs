//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceTest.BeaconPocService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BeaconInfo", Namespace="http://schemas.datacontract.org/2004/07/BeaconPocService")]
    [System.SerializableAttribute()]
    public partial class BeaconInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MajorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Major {
            get {
                return this.MajorField;
            }
            set {
                if ((object.ReferenceEquals(this.MajorField, value) != true)) {
                    this.MajorField = value;
                    this.RaisePropertyChanged("Major");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Minor {
            get {
                return this.MinorField;
            }
            set {
                if ((object.ReferenceEquals(this.MinorField, value) != true)) {
                    this.MinorField = value;
                    this.RaisePropertyChanged("Minor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneIdentifier {
            get {
                return this.PhoneIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneIdentifierField, value) != true)) {
                    this.PhoneIdentifierField = value;
                    this.RaisePropertyChanged("PhoneIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uuid {
            get {
                return this.UuidField;
            }
            set {
                if ((object.ReferenceEquals(this.UuidField, value) != true)) {
                    this.UuidField = value;
                    this.RaisePropertyChanged("Uuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppInfo", Namespace="http://schemas.datacontract.org/2004/07/BeaconPocService")]
    [System.SerializableAttribute()]
    public partial class AppInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppIdentifier {
            get {
                return this.AppIdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.AppIdentifierField, value) != true)) {
                    this.AppIdentifierField = value;
                    this.RaisePropertyChanged("AppIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BeaconPocService.IBeaconPocService")]
    public interface IBeaconPocService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBeaconPocService/GetAppInfo", ReplyAction="http://tempuri.org/IBeaconPocService/GetAppInfoResponse")]
        ServiceTest.BeaconPocService.AppInfo GetAppInfo(ServiceTest.BeaconPocService.BeaconInfo beaconInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBeaconPocService/GetAppInfo", ReplyAction="http://tempuri.org/IBeaconPocService/GetAppInfoResponse")]
        System.Threading.Tasks.Task<ServiceTest.BeaconPocService.AppInfo> GetAppInfoAsync(ServiceTest.BeaconPocService.BeaconInfo beaconInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBeaconPocService/GetVersion", ReplyAction="http://tempuri.org/IBeaconPocService/GetVersionResponse")]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBeaconPocService/GetVersion", ReplyAction="http://tempuri.org/IBeaconPocService/GetVersionResponse")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBeaconPocServiceChannel : ServiceTest.BeaconPocService.IBeaconPocService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BeaconPocServiceClient : System.ServiceModel.ClientBase<ServiceTest.BeaconPocService.IBeaconPocService>, ServiceTest.BeaconPocService.IBeaconPocService {
        
        public BeaconPocServiceClient() {
        }
        
        public BeaconPocServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BeaconPocServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BeaconPocServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BeaconPocServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ServiceTest.BeaconPocService.AppInfo GetAppInfo(ServiceTest.BeaconPocService.BeaconInfo beaconInfo) {
            return base.Channel.GetAppInfo(beaconInfo);
        }
        
        public System.Threading.Tasks.Task<ServiceTest.BeaconPocService.AppInfo> GetAppInfoAsync(ServiceTest.BeaconPocService.BeaconInfo beaconInfo) {
            return base.Channel.GetAppInfoAsync(beaconInfo);
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
    }
}
